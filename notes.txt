Current http path:
http://localhost:8000/
-----------------------------------------------------------------------------------------------

Views:-
All the pages that we need to display to the user will be available in the Resources->View folder.

Routes:-
Inside the routes folder we have 4 files:-
    the "APP" file is responsible for the api handling.
    the "WEB" file is responsible for URL routing.

Inside the "WEB" we need to provide all the new URLs and for handling the app.
-----------------------------------------------------------------------------------------------

DB:-
Create a database in the MySql and then create a user with all permissions.

How to create tables in DB in laravel?
In the Laravel, we dont need to create any table after creating a DB. We can run Migration scripts which is present in "database->migrations".

Now user can create migration patch and execute it to create table.

"php artisan make:migration create_listings_table" to create a table.

Now the new table would be created. Add the required columns in the newly created file.

Finally, run 'php artisan migrate' to run all migration files.
-----------------------------------------------------------------------------------------------

How to create users using the Seeder and UserFactiory?
Firstly,  inside the 'database/seeders' open the DatabaseSeeder.php file.

Then uncomment the "factory(10)->create();" line to create 10 different users inside the "users" table

To run the DatabaseSeeder.php run the below command:-
"php artisan db:seed"
-----------------------------------------------------------------------------------------------

How to delete  the content of deed and then execute the seed at a time?
To run the DatabaseSeeder.php run the below command:-
"php artisan migrate:refresh --seed"
-----------------------------------------------------------------------------------------------

How to create a Eloquent Model?
Instead of manually creating the models inside the Model folder, we can run the below command:-
    "php artisan make:model MODEL_NAME"

By doing this a new model will be created and it will extends the Model class.

So this new model will have a number of inbuilt functions which belongs to Model Class.
-----------------------------------------------------------------------------------------------

How to create a factory?
Run the below cammand:-
"php artisan make:factory FACTORY_NAME"
-----------------------------------------------------------------------------------------------

What is route model binding?
It is a self explainatory thing. Here we are binding the route with the model.

Here, this is the current route:-
Route::get('/listings/{id}', function ($id) {
    return view('listing', [
        'listing' => Listing::find($id)
    ]);
});

now if the users provides a ID which does not exist in the DB, then it cant be found in the model. So we will get an error.

To overcome this we can return the view only if we have a value for the given ID.
Route::get('/listings/{id}', function ($id) {
    $listing = List::find($id);
    if ($listing) {
        return view('listing', [
            'listing' => Listing::find($id)
        ]);
    } else {
        abort('404');
    }
});

By doing this we will be able send the view of listing only for valid id. Else it will return 404.

But instead of doing this, we can perform route:model binding:
Route::get('/listings/{listing}', function (Listing $listing) {
    return view('listing', [
        'listing' => $listing
    ]);
});
-----------------------------------------------------------------------------------------------

How to create a component like we do in React?

Before modifcation:
Main file:-
@foreach($lists as $list)
    <div>
        <p>
            {{$list->name}}
        </p>
    </div>
@endforeach

After modification:
Main file:-
@foreach($lists as $list)
    <x-Compon1 :list="$list" /> // Note:- before the component name 'x' needs to be given.
@endforeach

Compon1:-
@props(['list])

<div>
    <p>
        {{$list->name}}
    </p>
</div>

Here it is important to note how the props is passed:-
if we want to pass a string/number we dont need to add the (:) before the propName
    list="Just String"

if we want to pass a variable, then we need to use the (:)
    :list="$list"
-----------------------------------------------------------------------------------------------

What is the replacement of props.children in php?

instead if children (in React),  we need to put {{$slot}}

Before modification:-
parent.blade.php:-
    <p>...</p>
    <p>...</p>
    <p>...</p>
</div>

After modification:-
parent.blade.php:-
<x-child >
    <p>...</p>
    <p>...</p>
    <p>...</p>
</x-child>

child.blade.php:-
<div class='s1 s2 s3 s4 s5'>
    {{$slot}}
</div>
-----------------------------------------------------------------------------------------------

How can we pass class name to child component from parent?

Let us consider the above example. Now we are using the child component in a different instance.
Now we have to add s6 and s7 class names in the child component.

diffParent.blade.php:-
<x-child class='s6 s7'>
    <p>...</p>
    <p>...</p>
    <p>...</p>
</x-child>

child.blade.php:-
<div {{$attributes->merge(['class' => 's1 s2 s3 s4 s5'])}} > 
    {{$slot}}
</div>

By doing this the classes that are passed from the parent are merged with the child component. 
-----------------------------------------------------------------------------------------------

